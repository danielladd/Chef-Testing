# /etc/klerk.yml
#
# Generated by Chef, local modifications will be overwritten

mongo:
  uri: <%= @mongo_uri %>
  databaseName: <%= @klerk_database_name %>

blobStore:
  container: <%= @blobstore_container_name %>
  context:
    type: <%= @blobstore_context_type %>
    accessKeyId: <%= @blobstore_aws_s3_access_key_id %>
    secretKey: <%= @blobstore_aws_s3_secret_key %>

hazelcast:
  groupName: <%= @hazelcast_group_name %>
  groupPassword: <%= @hazelcast_group_password %>

antivirus:
  hosts: [ <%= @antivirus_hosts ? @antivirus_hosts.map {|x| "\"#{x}\""}.join(", ") : "" %> ]

events:
<% if @product_data_event_endpoints %>
  productDataEventEndpoints:
<% @product_data_event_endpoints.each_pair do |applicationid, endpoint| %>
    <%= applicationid %>: <%= endpoint %>
<% end %>
<% end %>

  productDataApplicationMetadataUpdateJobFinishedEventEndpoint: <%= @product_data_application_metadata_update_job_finished_event_endpoint %>
  deadProductDataApplicationMetadataUpdateJobFinishedEventEndpoint: <%= @dead_product_data_application_metadata_update_job_finished_event_endpoint %>

sprite:
  conductorUrl: <%= @sprite_conductor_url %>
  outputContainerPrefix: <%= @sprite_output_container_prefix %>
  notificationId: <%= @sprite_notification_id %>
  manifestUpdateNotificationEndpoint: <%= @sprite_manifest_update_notification_endpoint %>

jms:
  initialContextFactory: org.jnp.interfaces.NamingContextFactory
  providerUrl: <%= @jms_provider_url %>
  urlPkgPrefixes: org.jboss.naming:org.jnp.interfaces
  connectionFactoryName: /ConnectionFactory

server:
  applicationConnectors:
    - type: http
      # The port on which the HTTP server listens for service requests.
      port: 8090
  adminConnectors:
    - type: http
      # The port on which the HTTP server listens for administrative requests.
      port: 8091
  requestLog:
    appenders:
      - type: file
        # The file to which statements will be logged.
        currentLogFilename: /var/log/klerk/klerk-requests.log

        # When the log file rotates, the archived log will be renamed to this and gzipped. The
        # %d is replaced with the previous day (yyyy-MM-dd). Custom rolling windows can be created
        # by passing a SimpleDateFormat-compatible format as an argument: "%d{yyyy-MM-dd-hh}".
        archivedLogFilenamePattern: /var/log/klerk/klerk-requests-%d.log.gz

# Logging settings.
logging:

  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: INFO

  appenders:
    - type: file
      # The file to which current statements will be logged.
      currentLogFilename: /var/log/klerk/klerk.log

      # When the log file rotates, the archived log will be renamed to this and gzipped. The
      # %d is replaced with the previous day (yyyy-MM-dd). Custom rolling windows can be created
      # by passing a SimpleDateFormat-compatible format as an argument: "%d{yyyy-MM-dd-hh}".
      archivedLogFilenamePattern: /var/log/klerk/klerk-%d.log.gz
<% if node['chub-klerk'].attribute?('logstash_appender') %>
    - type: logstash
  <% node['chub-klerk']['logstash_appender'].each do |key, value| -%>
    <% if key == 'pool' %>
      pool:
      <% node['chub-klerk']['logstash_appender']['pool'].each do |poolKey, poolValue| -%>
        <% unless poolValue.empty? %>
        <%= poolKey %>: <%= poolValue %>
        <% end %>
      <% end %>
    <% elsif key == 'layout' %>
      layout:
      <% node['chub-klerk']['logstash_appender']['layout'].each do |layoutKey, layoutValue| -%>
        <% unless layoutValue.empty? %>
        <%= layoutKey %>: <%= layoutValue %>
        <% end %>
      <% end %>
    <% elsif !value.empty? %>
      <%= key %>: <%= value %>
    <% end %>
  <% end %>
<% end %>
