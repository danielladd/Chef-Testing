# Retries a command a configurable number of times with backoff.
#
# The retry count is given by ATTEMPTS (default 2), the initial backoff
# timeout is given by TIMEOUT in seconds (default 1.)
#
# Successive backoffs double the timeout.
function with_backoff {
  local max_attempts=${ATTEMPTS-2}
  local timeout=${TIMEOUT-1}
  local attempt=0
  local exitCode=0

  while [[ $attempt < $max_attempts ]]
  do
    set +e
    "$@"
    exitCode=$?
    set -e

    if [[ $exitCode == 0 ]]
    then
      break
    fi

    echo "Failure! Retrying in $timeout.." 1>&2
    sleep $timeout
    attempt=$(( attempt + 1 ))
    timeout=$(( timeout * 2 ))
  done

  if [[ $exitCode != 0 ]]
  then
    echo "You've failed me for the last time! ($@)" 1>&2
  fi

  return $exitCode
}

counter=0
response=0
max_retry=60
while [ $response = 200 ] &&  [ $counter -le $max_retry ]; do
  sleep 1
  counter=$((counter + 1))
  response=$(curl -o /dev/null --silent --head --write-out '%{http_code}' $1)
done

counter=$((counter - 1))

if [[ $counter == $max_retry ]]
then
  exit 0
fi

exit 0